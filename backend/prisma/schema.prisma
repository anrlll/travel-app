generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  passwordHash        String               @map("password_hash")
  username            String               @unique
  displayName         String?              @map("display_name")
  profileImageUrl     String?              @map("profile_image_url")
  locale              String               @default("ja")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  expenses            Expense[]
  friendOf            Friend[]             @relation("friend_of")
  friendRequests      Friend[]             @relation("user_friends")
  memories            Memory[]
  passwordResetTokens PasswordResetToken[]
  refreshTokens       RefreshToken[]
  tripPlanMembers     TripPlanMember[]
  tripPlans           TripPlan[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model TripPlan {
  id              String               @id @default(cuid())
  userId          String               @map("user_id")
  title           String
  description     String?
  destinations    Json                 @default("[]")
  startDate       DateTime?            @map("start_date")
  endDate         DateTime?            @map("end_date")
  dayCount        Int?                 @map("day_count")
  status          String               @default("draft")
  tags            String[]             @default([])
  notes           String?
  isPublic        Boolean              @default(false) @map("is_public")
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")
  budgets         Budget[]
  canvasCards     CanvasActivityCard[]
  cardConnections CardConnection[]
  expenses        Expense[]
  memories        Memory[]
  activities      TripPlanActivity[]
  tripPlanBudgets TripPlanBudget[]     @relation("TripPlanBudgets")
  members         TripPlanMember[]
  proposals       TripPlanProposal[]
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([startDate])
  @@map("trip_plans")
}

model TripPlanMember {
  id                   String                        @id @default(cuid())
  tripPlanId           String                        @map("trip_plan_id")
  userId               String?                       @map("user_id")
  guestName            String?                       @map("guest_name")
  guestEmail           String?                       @map("guest_email")
  role                 String                        @default("viewer")
  joinedAt             DateTime                      @default(now()) @map("joined_at")
  activityParticipants TripPlanActivityParticipant[]
  tripPlan             TripPlan                      @relation(fields: [tripPlanId], references: [id], onDelete: Cascade)
  user                 User?                         @relation(fields: [userId], references: [id])

  @@unique([tripPlanId, userId], name: "unique_trip_plan_user")
  @@unique([tripPlanId, guestEmail], name: "unique_trip_plan_guest")
  @@index([tripPlanId])
  @@map("trip_plan_members")
}

model TripPlanActivity {
  id             String                        @id @default(cuid())
  tripPlanId     String                        @map("trip_plan_id")
  dayNumber      Int                           @map("day_number")
  order          Int                           @default(0)
  startTime      DateTime?                     @map("start_time")
  endTime        DateTime?                     @map("end_time")
  title          String
  description    String?
  category       String
  location       String?
  customLocation Json?                         @map("custom_location")
  estimatedCost  Decimal?                      @map("estimated_cost") @db.Decimal(10, 2)
  actualCost     Decimal?                      @map("actual_cost") @db.Decimal(10, 2)
  notes          String?
  isCompleted    Boolean                       @default(false) @map("is_completed")
  createdAt      DateTime                      @default(now()) @map("created_at")
  updatedAt      DateTime                      @updatedAt @map("updated_at")
  isFromCanvas   Boolean                       @default(false) @map("is_from_canvas")
  canvasCardId   String?                       @map("canvas_card_id")
  canvasCard     CanvasActivityCard?           @relation(fields: [canvasCardId], references: [id])
  tripPlan       TripPlan                      @relation(fields: [tripPlanId], references: [id], onDelete: Cascade)
  participants   TripPlanActivityParticipant[]
  transports     TripPlanActivityTransport[]

  @@index([tripPlanId])
  @@index([dayNumber])
  @@index([canvasCardId])
  @@map("trip_plan_activities")
}

model TripPlanActivityParticipant {
  id                 String           @id @default(cuid())
  tripPlanActivityId String           @map("trip_plan_activity_id")
  tripPlanMemberId   String           @map("trip_plan_member_id")
  activity           TripPlanActivity @relation(fields: [tripPlanActivityId], references: [id], onDelete: Cascade)
  member             TripPlanMember   @relation(fields: [tripPlanMemberId], references: [id], onDelete: Cascade)

  @@unique([tripPlanActivityId, tripPlanMemberId])
  @@map("trip_plan_activity_participants")
}

model TripPlanActivityTransport {
  id                 String           @id @default(cuid())
  tripPlanActivityId String           @map("trip_plan_activity_id")
  transportType      String           @default("unset") @map("transport_type")
  durationMinutes    Int?             @map("duration_minutes")
  distanceKm         Decimal?         @map("distance_km") @db.Decimal(10, 2)
  cost               Decimal?         @db.Decimal(10, 2)
  routeData          Json?            @map("route_data")
  isAutoCalculated   Boolean          @default(true) @map("is_auto_calculated")
  activity           TripPlanActivity @relation(fields: [tripPlanActivityId], references: [id], onDelete: Cascade)

  @@map("trip_plan_activity_transport")
}

model CanvasActivityCard {
  id                 String             @id @default(cuid())
  tripPlanId         String             @map("trip_plan_id")
  positionX          Decimal            @map("position_x") @db.Decimal(10, 2)
  positionY          Decimal            @map("position_y") @db.Decimal(10, 2)
  title              String
  activityType       String             @map("activity_type")
  location           String?
  customLocation     Json?              @map("custom_location")
  startTime          String?            @map("start_time")
  endTime            String?            @map("end_time")
  cost               Decimal?           @db.Decimal(10, 2)
  budgetCategory     String?            @map("budget_category")
  memo               String?
  participants       Json?
  isCollapsed        Boolean            @default(false) @map("is_collapsed")
  isCompleted        Boolean            @default(false) @map("is_completed")
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  tripPlan           TripPlan           @relation(fields: [tripPlanId], references: [id], onDelete: Cascade)
  connectionsFrom    CardConnection[]   @relation("FromCard")
  connectionsTo      CardConnection[]   @relation("ToCard")
  proposalActivities ProposalActivity[]
  tripPlanActivities TripPlanActivity[]

  @@index([tripPlanId])
  @@index([positionX, positionY])
  @@map("canvas_activity_cards")
}

model CardConnection {
  id              String             @id @default(cuid())
  tripPlanId      String             @map("trip_plan_id")
  fromCardId      String             @map("from_card_id")
  toCardId        String             @map("to_card_id")
  transportType   String?            @default("unset") @map("transport_type")
  durationMinutes Int?               @map("duration_minutes")
  distanceKm      Decimal?           @map("distance_km") @db.Decimal(8, 2)
  cost            Decimal?           @db.Decimal(10, 2)
  routeData       Json?              @map("route_data")
  proposalId      String?            @map("proposal_id")
  createdAt       DateTime           @default(now()) @map("created_at")
  fromCard        CanvasActivityCard @relation("FromCard", fields: [fromCardId], references: [id], onDelete: Cascade)
  proposal        TripPlanProposal?  @relation(fields: [proposalId], references: [id])
  toCard          CanvasActivityCard @relation("ToCard", fields: [toCardId], references: [id], onDelete: Cascade)
  tripPlan        TripPlan           @relation(fields: [tripPlanId], references: [id], onDelete: Cascade)

  @@unique([fromCardId, toCardId])
  @@index([tripPlanId])
  @@index([fromCardId])
  @@index([toCardId])
  @@index([proposalId])
  @@map("card_connections")
}

model TripPlanProposal {
  id              String             @id @default(cuid())
  tripPlanId      String             @map("trip_plan_id")
  name            String
  color           String
  isOfficial      Boolean            @default(false) @map("is_official")
  totalBudget     Decimal?           @map("total_budget") @db.Decimal(10, 2)
  activityCount   Int?               @map("activity_count")
  totalDistanceKm Decimal?           @map("total_distance_km") @db.Decimal(10, 2)
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
  proposalDate    DateTime?          @map("proposal_date")
  connections     CardConnection[]
  activities      ProposalActivity[]
  tripPlan        TripPlan           @relation(fields: [tripPlanId], references: [id], onDelete: Cascade)

  @@index([tripPlanId])
  @@index([isOfficial])
  @@index([proposalDate])
  @@map("trip_plan_proposals")
}

model ProposalActivity {
  id         String             @id @default(cuid())
  proposalId String             @map("proposal_id")
  cardId     String             @map("card_id")
  dayNumber  Int?               @map("day_number")
  orderInDay Int?               @map("order_in_day")
  card       CanvasActivityCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  proposal   TripPlanProposal   @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@unique([proposalId, cardId])
  @@index([proposalId])
  @@index([cardId])
  @@map("proposal_activities")
}

model Budget {
  id         String   @id @default(cuid())
  tripPlanId String   @map("trip_plan_id")
  category   String
  amount     Decimal  @db.Decimal(10, 2)
  currency   String   @default("JPY")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  tripPlan   TripPlan @relation(fields: [tripPlanId], references: [id], onDelete: Cascade)

  @@index([tripPlanId])
  @@map("budgets")
}

model TripPlanBudget {
  id           String   @id @default(cuid())
  tripPlanId   String   @map("trip_plan_id")
  category     String
  budgetAmount Decimal  @map("budget_amount") @db.Decimal(10, 2)
  isPerPerson  Boolean  @default(false) @map("is_per_person")
  notes        String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  tripPlan     TripPlan @relation("TripPlanBudgets", fields: [tripPlanId], references: [id], onDelete: Cascade)

  @@unique([tripPlanId, category])
  @@index([tripPlanId])
  @@map("trip_plan_budgets")
}

model Expense {
  id              String   @id @default(cuid())
  tripPlanId      String   @map("trip_plan_id")
  userId          String   @map("user_id")
  category        String
  amount          Decimal  @db.Decimal(10, 2)
  currency        String   @default("JPY")
  description     String?
  expenseDate     DateTime @map("expense_date")
  paymentMethod   String?  @map("payment_method")
  receiptImageUrl String?  @map("receipt_image_url")
  participants    Json?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  tripPlan        TripPlan @relation(fields: [tripPlanId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tripPlanId])
  @@index([userId])
  @@index([expenseDate])
  @@map("expenses")
}

model Memory {
  id         String    @id @default(cuid())
  tripPlanId String    @map("trip_plan_id")
  userId     String    @map("user_id")
  title      String?
  content    String?
  mediaType  String?   @map("media_type")
  mediaUrl   String?   @map("media_url")
  latitude   Decimal?  @db.Decimal(10, 8)
  longitude  Decimal?  @db.Decimal(11, 8)
  rating     Int?
  tags       String[]  @default([])
  takenAt    DateTime? @map("taken_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  tripPlan   TripPlan  @relation(fields: [tripPlanId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tripPlanId])
  @@index([userId])
  @@index([takenAt])
  @@map("memories")
}

model Friend {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  friendUserId String   @map("friend_user_id")
  status       String   @default("pending") @map("status")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  friendUser   User     @relation("friend_of", fields: [friendUserId], references: [id], onDelete: Cascade)
  user         User     @relation("user_friends", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendUserId], name: "unique_friendship")
  @@index([userId])
  @@index([friendUserId])
  @@map("friends")
}
